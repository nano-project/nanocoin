# -*- mode: Makefile; -*-
# Copyright (c) 2011 Bitcoin Developers
# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

# Mac OS X makefile for bitcoin
# Originally by Laszlo Hanyecz (solar@heliacal.net)

CC=llvm-gcc
CXX=llvm-g++
DEPSDIR=/usr/local/opt

INCLUDEPATHS= \
 -I"$(CURDIR)" \
 -I"$(CURDIR)"/obj-mac \
 -I"$(DEPSDIR)/berkeley-db@4/include" \
 -I"$(DEPSDIR)/openssl/include" \
 -I"$(DEPSDIR)/boost/include"

LIBPATHS= \
 -L"$(DEPSDIR)/berkeley-db@4/lib" \
 -L"$(DEPSDIR)/openssl/lib" \
 -L"$(DEPSDIR)/boost/lib"

USE_LEVELDB:=1
USE_IPV6:=1

LIBS= -dead_strip

ifdef STATIC
# Build STATIC if you are redistributing the bitcoind binary
LIBS += \
 $(DEPSDIR)/lib/db48/libdb_cxx-4.8.a \
 $(DEPSDIR)/lib/libboost_system-mt.a \
 $(DEPSDIR)/lib/libboost_filesystem-mt.a \
 $(DEPSDIR)/lib/libboost_program_options-mt.a \
 $(DEPSDIR)/lib/libboost_thread-mt.a \
 $(DEPSDIR)/lib/libssl.a \
 $(DEPSDIR)/lib/libcrypto.a \
 -lz
else
LIBS += \
 -ldb_cxx-4.8 \
 -lboost_system-mt \
 -lboost_filesystem-mt \
 -lboost_program_options-mt \
 -lboost_thread-mt \
 -lssl \
 -lcrypto \
 -lz
endif

DEFS=-DMAC_OSX -DMSG_NOSIGNAL=0 -DBOOST_SPIRIT_THREADSAFE -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS

ifdef RELEASE
# Compile for maximum compatibility and smallest size.
# This requires that dependencies are compiled
# the same way.
CFLAGS = -O2 -msse2 -mssse3
else
CFLAGS = -g -msse2 -mssse3
endif

# ppc doesn't work because we don't support big-endian
CFLAGS += -Wall -Wextra -Wformat -Wno-ignored-qualifiers -Wformat-security -Wno-unused-parameter \
	$(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)

OBJS-mac= \
	obj-mac/groestl.o \
	obj-mac/blake.o \
	obj-mac/bmw.o \
	obj-mac/skein.o \
	obj-mac/keccak.o \
	obj-mac/shavite.o \
	obj-mac/jh.o \
	obj-mac/luffa.o \
	obj-mac/cubehash.o \
	obj-mac/echo.o \
	obj-mac/simd.o \
	obj-mac/alert.o \
	obj-mac/version.o \
	obj-mac/checkpoints.o \
	obj-mac/netbase.o \
	obj-mac/addrman.o \
	obj-mac/crypter.o \
	obj-mac/base58.o \
	obj-mac/key.o \
	obj-mac/db.o \
	obj-mac/init.o \
	obj-mac/irc.o \
	obj-mac/keystore.o \
	obj-mac/main.o \
	obj-mac/miner.o \
	obj-mac/net.o \
	obj-mac/ntp.o \
	obj-mac/stun.o \
	obj-mac/protocol.o \
	obj-mac/bitcoinrpc.o \
	obj-mac/rpcdump.o \
	obj-mac/rpcnet.o \
	obj-mac/rpcmining.o \
	obj-mac/rpcwallet.o \
	obj-mac/rpcblockchain.o \
	obj-mac/rpcrawtransaction.o \
	obj-mac/script.o \
	obj-mac/sync.o \
	obj-mac/util.o \
	obj-mac/wallet.o \
	obj-mac/walletdb.o \
	obj-mac/noui.o \
	obj-mac/kernel.o \
	obj-mac/kernel_worker.o

ifneq (${USE_IPV6}, -)
	DEFS += -DUSE_IPV6=$(USE_IPV6)
endif

all: nanocoind

#
# LevelDB support
#
ifeq (${USE_LEVELDB}, 1)
LIBS += $(CURDIR)/leveldb/libleveldb.a $(CURDIR)/leveldb/libmemenv.a
DEFS += $(addprefix -I,$(CURDIR)/leveldb/include) -DUSE_LEVELDB
DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)
OBJS-mac += obj-mac/txdb-leveldb.o
leveldb/libleveldb.a:
	@echo "Building LevelDB ..."; cd leveldb; CC=$(CC) CXX=$(CXX) make; cd ..
obj-mac/txdb-leveldb.o: leveldb/libleveldb.a
else
OBJS-mac += obj-mac/txdb-bdb.o
endif

ifeq (${USE_ASM}, 1)
# Assembler implementation
OBJS-mac += crypto/scrypt/asm/obj-mac/scrypt-x86.o crypto/scrypt/asm/obj-mac/scrypt-x86_64.o crypto/scrypt/asm/obj-mac/asm-wrapper.o
OBJS-mac += crypto/sha2/asm/obj-mac/sha2-x86.o crypto/sha2/asm/obj-mac/sha2-x86_64.o

crypto/scrypt/asm/obj-mac/scrypt-x86.o: crypto/scrypt/asm/scrypt-x86.S
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<

crypto/scrypt/asm/obj-mac/scrypt-x86_64.o: crypto/scrypt/asm/scrypt-x86_64.S
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<

crypto/scrypt/asm/obj-mac/asm-wrapper.o: crypto/scrypt/asm/asm-wrapper.cpp
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<

crypto/sha2/asm/obj-mac/sha2-x86.o: crypto/sha2/asm/sha2-x86.S
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<

crypto/sha2/asm/obj-mac/sha2-x86_64.o: crypto/sha2/asm/sha2-x86_64.S
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<

DEFS += -DUSE_ASM

else
ifeq  (${USE_SSE2}, 1)
# Intrinsic implementation
DEFS += -DUSE_SSE2
OBJS-mac += crypto/scrypt/intrin/obj-mac/scrypt-sse2.o

crypto/scrypt/intrin/obj-mac/scrypt-sse2.o: crypto/scrypt/intrin/scrypt-sse2.cpp
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<
else
# Generic implementation
OBJS-mac += crypto/scrypt/generic/obj-mac/scrypt-generic.o

crypto/scrypt/generic/obj-mac/scrypt-generic.o: crypto/scrypt/generic/scrypt-generic.cpp
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<
endif
endif

# auto-generated dependencies:
-include obj-mac/*.P

obj-mac/build.h: FORCE
	/bin/sh ../share/genbuild.sh obj-mac/build.h
version.cpp: obj-mac/build.h
DEFS += -DHAVE_BUILD_INFO

obj-mac/scrypt-x86.o: scrypt-x86.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<
obj-mac/scrypt-x86_64.o: scrypt-x86_64.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<
obj-mac/scrypt-arm.o: scrypt-arm.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<
	
obj-mac/%.o: %.c
	$(CC) -c $(xCXXFLAGS) -fpermissive -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
              -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	      
	rm -f $(@:%.o=%.d)

obj-mac/%.o: %.cpp
	$(CXX) -c $(CFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

nanocoind: $(OBJS-mac:obj-mac/%=obj-mac/%)
	$(CXX) $(CFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS)

clean:
	-rm -f nanocoind
	-rm -f obj-mac/*.o
	-rm -f obj-mac/*.P
	-rm -f obj-mac/*.d
	-rm -f crypto/scrypt/asm/obj-mac/*.o
	-rm -f crypto/scrypt/asm/obj-mac/*.P
	-rm -f crypto/scrypt/asm/obj-mac/*.d
	-rm -f crypto/scrypt/intrin/obj-mac/*.o
	-rm -f crypto/scrypt/intrin/obj-mac/*.P
	-rm -f crypto/scrypt/intrin/obj-mac/*.d
	-rm -f crypto/scrypt/generic/obj-mac/*.o
	-rm -f crypto/scrypt/generic/obj-mac/*.P
	-rm -f crypto/scrypt/generic/obj-mac/*.d
	-rm -f crypto/sha2/asm/obj-mac/*.o
	-rm -f crypto/sha2/asm/obj-mac/*.P
	-rm -f crypto/sha2/asm/obj-mac/*.d
	-rm -f obj-mac/build.h

FORCE:
