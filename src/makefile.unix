# Copyright (c) 2009-2010 Satoshi Nakamoto
# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

USE_LEVELDB:=1
USE_IPV6:=1
USE_O3:=1
USE_ASM:=1
STATIC:=1

LINK:=$(CXX)
ARCH:=$(shell uname -m)

DEFS=-DBOOST_SPIRIT_THREADSAFE -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS

DEFS += $(addprefix -I,$(CURDIR) $(CURDIR)/obj-linux $(BOOST_INCLUDE_PATH) $(BDB_INCLUDE_PATH) $(OPENSSL_INCLUDE_PATH))
LIBS = $(addprefix -L,$(BOOST_LIB_PATH) $(BDB_LIB_PATH) $(OPENSSL_LIB_PATH))

LMODE = dynamic
LMODE2 = dynamic
ifdef STATIC
	LMODE = static
	ifeq (${STATIC}, all)
		LMODE2 = static
	endif
endif

# for boost 1.37, add -mt to the boost libraries
LIBS += \
 -Wl,-B$(LMODE) \
   -l boost_system$(BOOST_LIB_SUFFIX) \
   -l boost_filesystem$(BOOST_LIB_SUFFIX) \
   -l boost_program_options$(BOOST_LIB_SUFFIX) \
   -l boost_thread$(BOOST_LIB_SUFFIX) \
   -l db_cxx$(BDB_LIB_SUFFIX) \
   -l ssl \
   -l crypto

ifneq (${USE_IPV6}, -)
	DEFS += -DUSE_IPV6=$(USE_IPV6)
endif

LIBS+= \
 -Wl,-B$(LMODE2) \
   -l z \
   -l dl \
   -l pthread


# Hardening
# Make some classes of vulnerabilities unexploitable in case one is discovered.
#
	# This is a workaround for Ubuntu bug #691722, the default -fstack-protector causes
	# -fstack-protector-all to be ignored unless -fno-stack-protector is used first.
	# see: https://bugs.launchpad.net/ubuntu/+source/gcc-4.5/+bug/691722
	HARDENING=-fno-stack-protector

	# Stack Canaries
	# Put numbers at the beginning of each stack frame and check that they are the same.
	# If a stack buffer if overflowed, it writes over the canary number and then on return
	# when that number is checked, it won't be the same and the program will exit with
	# a "Stack smashing detected" error instead of being exploited.
	HARDENING+=-fstack-protector-all -Wstack-protector

	# Make some important things such as the global offset table read only as soon as
	# the dynamic linker is finished building it. This will prevent overwriting of addresses
	# which would later be jumped to.
	LDHARDENING+=-Wl,-z,relro -Wl,-z,now

	# Build position independent code to take advantage of Address Space Layout Randomization
	# offered by some kernels.
	# see doc/build-unix.txt for more information.
	ifdef PIE
		HARDENING+=-fPIE
		LDHARDENING+=-pie
	endif

	# -D_FORTIFY_SOURCE=2 does some checking for potentially exploitable code patterns in
	# the source such overflowing a statically defined buffer.
	HARDENING+=-D_FORTIFY_SOURCE=2
#


DEBUGFLAGS=-g


ifeq (${ARCH}, i686)
	EXT_OPTIONS=-msse2 -mssse3
endif

ifeq (${ARCH}, x86_64)
	EXT_OPTIONS=-mssse3
endif

xOPT_LEVEL=-O2
ifeq (${USE_O3}, 1)
	xOPT_LEVEL=-O3
endif

# CXXFLAGS can be specified on the make command line, so we use xCXXFLAGS that only
# adds some defaults in front. Unfortunately, CXXFLAGS=... $(CXXFLAGS) does not work.
xCXXFLAGS=$(xOPT_LEVEL) $(EXT_OPTIONS) -pthread -Wall -Wextra -Wno-ignored-qualifiers -Wformat -Wformat-security -Wno-unused-parameter \
	$(DEBUGFLAGS) $(DEFS) $(HARDENING) $(CXXFLAGS)

# LDFLAGS can be specified on the make command line, so we use xLDFLAGS that only
# adds some defaults in front. Unfortunately, LDFLAGS=... $(LDFLAGS) does not work.
xLDFLAGS=$(LDHARDENING) $(LDFLAGS)

OBJS= \
	obj-linux/groestl.o \
	obj-linux/blake.o \
	obj-linux/bmw.o \
	obj-linux/skein.o \
	obj-linux/keccak.o \
	obj-linux/shavite.o \
	obj-linux/jh.o \
	obj-linux/luffa.o \
	obj-linux/cubehash.o \
	obj-linux/echo.o \
	obj-linux/simd.o \
	obj-linux/alert.o \
	obj-linux/version.o \
	obj-linux/checkpoints.o \
	obj-linux/netbase.o \
	obj-linux/addrman.o \
	obj-linux/crypter.o \
	obj-linux/base58.o \
	obj-linux/key.o \
	obj-linux/db.o \
	obj-linux/init.o \
	obj-linux/irc.o \
	obj-linux/keystore.o \
	obj-linux/miner.o \
	obj-linux/main.o \
	obj-linux/net.o \
	obj-linux/ntp.o \
	obj-linux/stun.o \
	obj-linux/protocol.o \
	obj-linux/bitcoinrpc.o \
	obj-linux/rpcdump.o \
	obj-linux/rpcnet.o \
	obj-linux/rpcmining.o \
	obj-linux/rpcwallet.o \
	obj-linux/rpcblockchain.o \
	obj-linux/rpcrawtransaction.o \
	obj-linux/script.o \
	obj-linux/sync.o \
	obj-linux/util.o \
	obj-linux/wallet.o \
	obj-linux/walletdb.o \
	obj-linux/noui.o \
	obj-linux/kernel.o \
	obj-linux/kernel_worker.o

all: nanocoind

#
# LevelDB support
#
ifeq (${USE_LEVELDB}, 1)
LIBS += $(CURDIR)/leveldb/libleveldb.a $(CURDIR)/leveldb/libmemenv.a
DEFS += $(addprefix -I,$(CURDIR)/leveldb/include) -DUSE_LEVELDB
DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)
OBJS += obj-linux/txdb-leveldb.o
leveldb/libleveldb.a:
	@echo "Building LevelDB ..."; cd leveldb; CC=$(CC) CXX=$(CXX) make libleveldb.a libmemenv.a; cd ..
obj-linux/txdb-leveldb.o: leveldb/libleveldb.a
endif
ifneq (${USE_LEVELDB}, 1)
OBJS += obj-linux/txdb-bdb.o
endif

ifeq (${USE_ASM}, 1)
# Assembler implementation
OBJS += crypto/scrypt/asm/obj-linux/scrypt-arm.o crypto/scrypt/asm/obj-linux/scrypt-x86.o crypto/scrypt/asm/obj-linux/scrypt-x86_64.o crypto/scrypt/asm/obj-linux/asm-wrapper.o
OBJS += crypto/sha2/asm/obj-linux/sha2-arm.o crypto/sha2/asm/obj-linux/sha2-x86.o crypto/sha2/asm/obj-linux/sha2-x86_64.o

crypto/scrypt/asm/obj-linux/scrypt-x86.o: crypto/scrypt/asm/scrypt-x86.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

crypto/scrypt/asm/obj-linux/scrypt-x86_64.o: crypto/scrypt/asm/scrypt-x86_64.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

crypto/scrypt/asm/obj-linux/scrypt-arm.o: crypto/scrypt/asm/scrypt-arm.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

crypto/scrypt/asm/obj-linux/asm-wrapper.o: crypto/scrypt/asm/asm-wrapper.cpp
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

crypto/sha2/asm/obj-linux/sha2-x86.o: crypto/sha2/asm/sha2-x86.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

crypto/sha2/asm/obj-linux/sha2-x86_64.o: crypto/sha2/asm/sha2-x86_64.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

crypto/sha2/asm/obj-linux/sha2-arm.o: crypto/sha2/asm/sha2-arm.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

DEFS += -DUSE_ASM

else
ifeq  (${USE_SSE2}, 1)
# Intrinsic implementation
DEFS += -DUSE_SSE2
OBJS += crypto/scrypt/intrin/obj-linux/scrypt-sse2.o

crypto/scrypt/intrin/obj-linux/scrypt-sse2.o: crypto/scrypt/intrin/scrypt-sse2.cpp
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<
else
# Generic implementation
OBJS += crypto/scrypt/generic/obj-linux/scrypt-generic.o

crypto/scrypt/generic/obj-linux/scrypt-generic.o: crypto/scrypt/generic/scrypt-generic.cpp
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<
endif
endif


# auto-generated dependencies:
-include obj-linux/*.P

obj-linux/build.h: FORCE
	/bin/sh ../share/genbuild.sh obj-linux/build.h
version.cpp: obj-linux/build.h
DEFS += -DHAVE_BUILD_INFO

obj-linux/scrypt-x86.o: scrypt-x86.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<
obj-linux/scrypt-x86_64.o: scrypt-x86_64.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<
obj-linux/scrypt-arm.o: scrypt-arm.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<
	
obj-linux/%.o: %.c
	$(CXX) -c $(xCXXFLAGS) -fpermissive -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
			  -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
		  
	rm -f $(@:%.o=%.d)


obj-linux/%.o: %.cpp
	$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
		  -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

nanocoind: $(OBJS:obj-linux/%=obj-linux/%)
	$(LINK) $(xCXXFLAGS) -o $@ $^ $(xLDFLAGS) $(LIBS)

clean:
	-rm -f nanocoind
	-rm -f obj-linux/*.o
	-rm -f obj-linux/*.P
	-rm -f obj-linux/*.d
	-rm -f crypto/scrypt/asm/obj-linux/*.o
	-rm -f crypto/scrypt/asm/obj-linux/*.P
	-rm -f crypto/scrypt/asm/obj-linux/*.d
	-rm -f crypto/scrypt/intrin/obj-linux/*.o
	-rm -f crypto/scrypt/intrin/obj-linux/*.P
	-rm -f crypto/scrypt/intrin/obj-linux/*.d
	-rm -f crypto/scrypt/generic/obj-linux/*.o
	-rm -f crypto/scrypt/generic/obj-linux/*.P
	-rm -f crypto/scrypt/generic/obj-linux/*.d
	-rm -f crypto/sha2/asm/obj-linux/*.o
	-rm -f crypto/sha2/asm/obj-linux/*.P
	-rm -f crypto/sha2/asm/obj-linux/*.d
	-rm -f obj-linux/build.h

FORCE:
